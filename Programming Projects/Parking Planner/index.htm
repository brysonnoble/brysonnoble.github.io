<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Parking Visualization</title>
  <style>
    .parking-row {
      display: flex;
      margin-bottom: 10px;
    }
    .parking-space {
      width: 40px;
      height: 40px;
      border: 1px solid #000;
      display: flex;
      justify-content: center;
      align-items: center;
      margin-right: 5px;
    }
    .unblocked {
      border: 2px dashed red;
    }
  </style>
  <script>
    function processForm(event) {
      event.preventDefault();

      // Parse the inputs
      const numRows = parseInt(document.getElementById('numRows').value);
      const numCars = parseInt(document.getElementById('numCars').value);
      const unblockedAllowed = document.querySelector('input[name="unblocked"]:checked').value === 'yes';
      const unblockedSpaces = unblockedAllowed ? parseInt(document.querySelector('[name="unblockedSpaces"]').value) || 0 : 0;

      const rows = [];
      for (let i = 1; i <= numRows; i++) {
        rows.push({ rowNum: i, spaces: parseInt(document.querySelector(`[name="spacesInRow${i}"]`).value) || 0 });
      }

      const cars = [];
      for (let i = 1; i <= numCars; i++) {
        const nickname = document.querySelector(`[name="nicknameCar${i}"]`).value || `Car ${i}`;
        const leaveTimes = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'].map(day =>
          document.querySelector(`[name="car${i}_${day.toLowerCase()}"]`).value
        );
        const latestLeaveTime = Math.max(...leaveTimes.map(time => convertTimeToMinutes(time))); // Use the latest leave time
        cars.push({ nickname, latestLeaveTime, index: i });
      }

      // Sort cars by latest leave time (descending), then by index
      cars.sort((a, b) => b.latestLeaveTime - a.latestLeaveTime || a.index - b.index);

      // Arrange cars into rows
      const layout = [];
      let unblockedParking = [];
      for (let car of cars) {
        let parked = false;
        for (let row of rows) {
          if (layout[row.rowNum - 1] === undefined) layout[row.rowNum - 1] = [];
          const rowCars = layout[row.rowNum - 1];
          if (
            rowCars.length < row.spaces &&
            rowCars.every(rowCar => rowCar.latestLeaveTime >= car.latestLeaveTime) // Ensure no blocking
          ) {
            rowCars.push(car);
            parked = true;
            break;
          }
        }
        if (!parked && unblockedParking.length < unblockedSpaces) {
          unblockedParking.push(car);
        }
      }

      // Render the layout
      renderVisualization(rows, layout, unblockedParking);
    }

    function renderVisualization(rows, layout, unblockedParking) {
      const container = document.getElementById('visualization');
      container.innerHTML = ''; // Clear previous visualization

      rows.forEach((row, index) => {
        const rowDiv = document.createElement('div');
        rowDiv.className = 'parking-row';
        rowDiv.innerHTML = `<strong>Row ${row.rowNum}:</strong> `;

        for (let i = 0; i < row.spaces; i++) {
          const spaceDiv = document.createElement('div');
          spaceDiv.className = 'parking-space';
          const car = (layout[row.rowNum - 1] || [])[i];
          if (car) spaceDiv.textContent = car.nickname;
          rowDiv.appendChild(spaceDiv);
        }

        container.appendChild(rowDiv);
      });

      if (unblockedParking.length > 0) {
        const unblockedDiv = document.createElement('div');
        unblockedDiv.innerHTML = '<strong>Unblocked Parking:</strong>';
        unblockedParking.forEach(car => {
          const carDiv = document.createElement('div');
          carDiv.className = 'parking-space unblocked';
          carDiv.textContent = car.nickname;
          unblockedDiv.appendChild(carDiv);
        });
        container.appendChild(unblockedDiv);
      }
    }

    function convertTimeToMinutes(time) {
      const [hour, rest] = time.split(':');
      const [minutes, period] = rest.split(' ');
      const totalMinutes = parseInt(hour) * 60 + parseInt(minutes);
      return period === 'PM' && hour !== '12' ? totalMinutes + 720 : totalMinutes;
    }
  </script>
</head>
<body>
  <form onsubmit="processForm(event)">
    <h2>Parking Form</h2>
    <label>How many rows of parking?</label>
    <input type="number" id="numRows" name="numRows" min="0" oninput="generateRows()"><br>

    <div id="rowContainer"></div>

    <label>Is there any unblocked parking?</label>
    <input type="radio" name="unblocked" value="yes" onclick="toggleUnblockedParking()"> Yes
    <input type="radio" name="unblocked" value="no" onclick="toggleUnblockedParking()"> No<br>

    <div id="unblockedContainer" style="display:none;">
      <label>How many spaces of unblocked parking?</label>
      <input type="number" name="unblockedSpaces" min="0"><br>
    </div>

    <label>How many cars will be parked?</label>
    <input type="number" id="numCars" name="numCars" min="0" oninput="generateCars()"><br>

    <div id="carContainer"></div>

    <button type="submit">Submit</button>
  </form>

  <div id="visualization"></div>
</body>
</html>
